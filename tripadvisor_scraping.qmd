---
title: TripAdvisor API 
---

```{r}
library(httr)
```

```{r}
mn_museum <- read_csv('Data/museums_tidy.csv') |>
  filter(ADSTATE == 'MN')
```

```{r}
API_KEY = "35A7173AD4C04CE4A305D946EAD121D1"
url <- "https://api.content.tripadvisor.com/api/v1/location/search"
```

```{r}
tripAdvisorAPI <- function(name, lat, long, state, postal) {
  queryString <- list(
    language = "en",
    key = API_KEY,
    searchQuery = name,
    latLong = paste(format(lat, nsmall = 5),",",format(long, nsmall = 5),sep="")
  )
  #print(paste(format(lat, nsmall = 5),",",format(long, nsmall = 5),sep=""))
  response <- GET(url, query = queryString, add_headers(Accept = "application/json"))
  
  if (http_error(response)) {
    stop("API request failed with status code: ", status_code(response))
  }
  
  detail <- content(response, type = "application/json")
  num_results <- length(detail$data)
  if (num_results == 0) {
    return(0)
  }
  
  for (i in 1:num_results) {
    address_obj <- detail$data[[i]]$address_obj
    #print(address_obj)
    if (!is.null(address_obj$country) && !is.na(address_obj$country) && address_obj$country != "United States") {
      next
    }
    if (!is.null(address_obj$country) && !is.na(address_obj$country) && address_obj$country != "United States") {
      next
    }
    if (!is.null(address_obj$postalcode)  && substr(address_obj$postalcode, 1, 5) == postal) {
      return(detail$data[[i]]$location_id)
    }
    
    if (!is.null(address_obj$state)  && address_obj$state == state) {
      return(detail$data[[i]]$location_id)
    }
    
  }
  print("No compatible place")
  return(0)
}
```

```{r}
tripAdvisorAPI("MOBILE MUSEUM OF ART", 30.70401, -88.15462, "Alabama",36689)
```


```{r}
locations_mn <-tibble(name = mn_museum$COMMONNAME, lat = mn_museum$LATITUDE, long = mn_museum$LONGITUDE, address=mn_museum$ADSTREET, city = mn_museum$ADCITY, website_1 = mn_museum$WEBURL)
location_id <- double(length=length(mn_museum$COMMONNAME))
```

```{r}
for (i in 1:length(mn_museum$COMMONNAME)){
  location_id[i] <-as.numeric( tripAdvisorAPI(mn_museum$COMMONNAME[i], mn_museum$LATITUDE[i], mn_museum$LONGITUDE[i], "Minnesota",mn_museum$ADZIP5[i]))
  
}
```

```{r}
locations_mn <- locations_mn |> mutate(id_tripadvisor = location_id) |>
  filter(id_tripadvisor != 0)
```

```{r}
tripadvisor_detail <- function(location_id){
  url_detail <- paste("https://api.content.tripadvisor.com/api/v1/location/",format(location_id),"/details",sep="")

  queryString_detail <- list(
    language = "en",
    currency = "USD",
    key = API_KEY
  )
  
  response <- VERB("GET", url_detail, query = queryString_detail, content_type("application/octet-stream"), accept("application/json"))
  
  detail <- content(response, type = "application/json")
  return(detail)
}
```

```{r}
tripadvisor_web <- vector(length = nrow(locations_mn))
phone_num <- vector(length = nrow(locations_mn))
website <- vector(length=nrow(locations_mn))
writing_review <- vector(length=nrow(locations_mn)) 
ranking_string <- vector(length=nrow(locations_mn))
rating <- vector(length=nrow(locations_mn))
rating_count <- vector(length=nrow(locations_mn))
open_hour <- vector(length=nrow(locations_mn))
names <- vector(length=nrow(locations_mn))
```

```{r}
image_link <- vector(length=nrow(locations_mn))
```

```{r}
#nrow(locations_mn)
for (i in 1:nrow(locations_mn)){
  print(i)
  tripadvisor_content <- tripadvisor_detail(locations_mn$id_tripadvisor[[i]])
  #web url
  if(!is.null(tripadvisor_content$name)){
  names[[i]] <- tripadvisor_content$name
  }
  if(!is.null(tripadvisor_content$website)){
  tripadvisor_web[[i]] <- tripadvisor_content$website
  }
  #phone number
  if(!is.null(tripadvisor_content$phone)){
    phone_num[[i]] <- tripadvisor_content$phone
  }
  #writing reviews
  if(!is.null(tripadvisor_content$write_review)){
    writing_review[[i]] <- tripadvisor_content$write_review
  }
  #ranking string
  if(!is.null(tripadvisor_content$ranking_data$ranking_string)){
      ranking_string[[i]] <- tripadvisor_content$ranking_data$ranking_string
  }
  #rating
  if(!is.null(tripadvisor_content$rating)){
    rating[[i]] <- tripadvisor_content$rating
  }
  #open hour
  if(!is.null(tripadvisor_content$hours$weekday_text)){
    hours <- ""
    for (j in 1:length(tripadvisor_content$hours$weekday_text)) {
        if (j > 1) {  
            hours <- paste(hours, ",",tripadvisor_content$hours$weekday_text[j], sep="")
        } else {
            hours <- paste(hours, tripadvisor_content$hours$weekday_text[j], sep="")
        }
    }
    open_hour[[i]] <- hours
  }
  if(!is.null(tripadvisor_content$review_rating_count)){
    #print(tripadvisor_content$review_rating_count)
    count <- ""
    for (j in 1:length(tripadvisor_content$review_rating_count)) {
    if (j > 1) {  # This check avoids adding a leading comma
            count <- paste(count, ",",format(j),": ",tripadvisor_content$review_rating_count[j], sep="")
        } else {
            count <- paste(count, format(j),": ",tripadvisor_content$review_rating_count[j], sep="")
        }
    }
    rating_count[[i]] <- count
  }
}
```


```{r}
locations_mn_fetched <- locations_mn |> mutate(nameTrip = names,
                                      web = tripadvisor_web,
                                       phone = phone_num,
                                       review_write = writing_review,
                                       ranking_str = ranking_string,
                                       rate = rating,
                                       operation = open_hour,
                                        rating_details = rating_count
                                       ) 
```




```{r}
#nrow(locations_mn)
for (i in 1:nrow(locations_mn)){
  print(i)
  tripadvisor_content <- tripadvisor_detail(locations_mn$id_tripadvisor[[i]])
  #web url
  
  if(!is.null(tripadvisor_content$website)){
  tripadvisor_web[[i]] <- tripadvisor_content$website
  }
  #phone number
  if(!is.null(tripadvisor_content$phone)){
    phone_num[[i]] <- tripadvisor_content$phone
  }
  #writing reviews
  if(!is.null(tripadvisor_content$write_review)){
    writing_review[[i]] <- tripadvisor_content$write_review
  }
  #ranking string
  if(!is.null(tripadvisor_content$ranking_data$ranking_string)){
      ranking_string[[i]] <- tripadvisor_content$ranking_data$ranking_string
  }
  #rating
  if(!is.null(tripadvisor_content$rating)){
    rating[[i]] <- tripadvisor_content$rating
  }
  #open hour
  if(!is.null(tripadvisor_content$hours$weekday_text)){
    hours <- ""
    for (j in 1:length(tripadvisor_content$hours$weekday_text)) {
        if (j > 1) {  
            hours <- paste(hours, ",",tripadvisor_content$hours$weekday_text[j], sep="")
        } else {
            hours <- paste(hours, tripadvisor_content$hours$weekday_text[j], sep="")
        }
    }
    open_hour[[i]] <- hours
  }
  if(!is.null(tripadvisor_content$review_rating_count)){
    #print(tripadvisor_content$review_rating_count)
    count <- ""
    for (j in 1:length(tripadvisor_content$review_rating_count)) {
    if (j > 1) {  # This check avoids adding a leading comma
            count <- paste(count, ",",format(j),": ",tripadvisor_content$review_rating_count[j], sep="")
        } else {
            count <- paste(count, format(j),": ",tripadvisor_content$review_rating_count[j], sep="")
        }
    }
    rating_count[[i]] <- count
  }
}
```

```{r}
tripadvisor_img <- function(location_id){
  url_img <- paste("https://api.content.tripadvisor.com/api/v1/location/",format(location_id),"/photos",sep="")
  queryString_detail <- list(
    language = "en",
    limit = 1,
    key = API_KEY
  )
  
  response <- VERB("GET", url_img, query = queryString_detail, content_type("application/octet-stream"), accept("application/json"))
  
  detail <- content(response, type = "application/json")
  if (!is.null(detail$data) && length(detail$data) >= 1) {
    return(detail$data[[1]]$images$medium$url)
  } else {
    return("")
  }
}
```

```{r}
for (i in 1:nrow(locations_mn)){
  print(i)
  image_link[[i]] <- tripadvisor_img(locations_mn$id_tripadvisor[[i]])
  
}
```

```{r}
locations_mn_fetched <- locations_mn_fetched |> mutate(image = image_link)
```


```{r}
tripadvisor_mn_data <- write.csv(locations_mn_fetched,"Data/tripadvisor_data.csv")
```


